Day 0
    Git Bash
        Configure username and email
            git config --global user.name "Your name here"
            git config --global user.email "your_email@example.com"
        cd /c/Users/jaq-a/30-Days-Of-React
        cd /c/Users/JAhmed/30-Days-Of-React
        clone your fork
            git clone git@github.com:username/30-Days-Of-React.git
        create a new branch
            git checkout -b 'name of branch'
        Structure Files in Git
            mkdir -p solutions/day-01
            touch solutions/day-01/level1.js
        Commit Exercice solutions
            git add relative path with /
            git commit -m "exercise complete"
            git push origin exercise-solutions # branch `exercise-solutions` was created earlier
        Get Up to date exercise soluions
            git pull origin exercise-solutions




Day 1
    1. Variables
        - var, let and const difference:
            - https://www.developer.com/languages/javascript/javascript-var-let-const-variable-declaration/
            - var is not used much anymore
            - var is function scoped
            - let and const is block scoped
            - const should be used when variable doesn't need to be changed
            - const object cannot be updated, the properties of this objects can be updated
            - var variables can be updated and re-declared within its scope
            - let variables can be updated but not re-declared
            - const variables can neither be updated nor re-declared
            - They are all hoisted to the top of their scope. But while var variables are initialized with undefined, let and const variables are not initialized
            - While var and let can be declared without being initialized, const must be initialized during declaration

    3. Arrays
        - You can create arrays the following two ways
            - const arr = Array()
            - const arr = [] 
                - This is the recomended way to create empty arrays
        - 'array name' .length will give number of items in array
        - .split() splits strings into an array of items
        - to get last item in array type 'array name'.length - 1
        - Array() = creates an empty array
        - fill() = fills array with static elements
            - for example Array(8),fill('X') creates an array with 8 X's
        - concat() = combines two arrays
            - array you want to appear first .concat(array you want to appear after first)
        - indexOf() = checks if an item exists if it does it returns where it is within the array. If it doesn't it returns -1
        - lastIndexOf() = it gives the position of the last time the item is in the array
        - includes() = checks if item exists in array // boolean
        - isArray() = checks if the data type is an array // boolean
        - toString() = converts to string
        - join() = will convert the array to string with the inputed parameter as the connector
        - slice() = create an array with a part of another array
                - slice(2) = creates an array of all items after index 2
                - slice(1, 4) = creates an array of all items starting from index 1 and ending at index 3. 
        - splice() = It takes three parameters:Starting position, number of times to be removed and number of items to be added.
        - Push() = add an item to the end of an array
        - pop() = remove an item at the end of an array
        - shift() = remove an item at the beginning of an array
        - unshift() = add an item to the beginning of an array
        - reverse() = reverse array
        - sort() = sort array into alphabetical order
            - Normally just using sort() is fine.
            - The function that you pass tells it how to sort the elements. 
            - It takes two parameters (a and b) that represent any two elements from the array. 
            - How the elements will be sorted depends on the function’s return value:
                - if it returns a negative value, the value in a will be ordered before b.
                - if it returns 0, the ordering of a and b won’t change.
                - if it returns a positive value, the value in b will be ordered before a.
                - When you pass the function (a, b) => a - b, you’re telling the .sort() function to sort the numbers in ascending order.
        - you can store arrays within arrays.
        - Remove Punctuation from string
            - replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"")
            - If their are crazy spaces between words because of the removed Punctuation.
                - replace(/\s{2,}/g," ");
        - To export stuff you have to make them a global variable (var)
            - Use export {name of variable};
            - import using import { name of variable } from "./file.js";
                -add more . before / to go back more folders
        - to check if variable is undefined use typeof

    4. Conditions
        - Conditions can be implementing using the following ways:
                - if
                - if else
                - if else if else
                - switch
                - ternary operator
        - Switch is an alternative for if else if else else
            - Case block runs if the value in the switch statement parenthesis matches with the case value. 
            - The break statement is to terminate execution so the code execution does not go down after the condition is satisfied. 
            - The default block runs if all the cases don't satisfy the condition.
        - Ternary operator is very common in React
            - It is a short way to write if else statement.
            - a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.                
            
    5. Loops
        - Regular for loop can be used anywhere when the number of iteration is known.
        - While loop when the number of iteration is not known
        - Do while loop and while loop are almost the same but do while loop run at least once even when the condition is false
        - 'for of' used like java for each
            - used to iterate through arrays
        - 'for each' is similar to 'for of' but you need to also define the index number as well as the array itself sometimes
        - 'for in' is used for objects

    6. Scope
        - Variable scopes can be:
            - Windowed
            - Global
                - visible by everything
            - Local
                - Function - visible within a function (and its sub-functions and blocks)
                - Block - visible within a block (and its sub-blocks)
                - Module - visible within a module

    7. Object
        - To create an object you have to make it equal to {}
            - const person = {}
            - To create an object with values put the values within the curly brackets
                # - const person = { 
                #     firstname : 'Jaquan', 
                #     surname : 'Ahmed'
                #     } 
            - You can add more values to an object after it has been created
                - person.nationality = 'Ethiopian'
                - person.country = 'Finland'
                - person.title = 'teacher'
                - person.skills.push('Meteor')
                - person.skills.push('SasS')
                - person.isMarried = true
        - You can get values from an object using . followed by key name if the key-name is a one word as well as using square bracket and a quote
            - console.log(person.firstName)
            - or console.log(person['firstName'])
        - You can create functions as object values
            - You can use the word 'this' to access the values of different properties of the object
                - this.firstname
            - We can not use an arrow function as object method because the word this refers to the window inside an arrow function instead of the object itself
        - Object Methods
            - Object.assign: To copy an object without modifying the original object
                - Object.assign({}, person)
            - Object.keys: To get the keys or properties of an object as an array
            - Object.values: To get values of an object as an array
            - Object.entries: To get the keys and values in an array
            - hasOwnProperty: To check if a specific key or property exist in an object
    
    8. Functions
        -A function can be declared or created in couple of ways:
            - Declaration function
                - functions can be created like this
                    - function functionName() { }
                - and called like this
                    - functionName()
            - Expression function
                - Expression functions are anonymous functions. After we create a function without a name and we assign it to a variable. 
                  To return a value from the function we should call the variable.
                - expression functions can be created like this
                    - const square = function (n) { }
            - Anonymous function
                - const anonymousFun = function () { 
                    console.log('I am an anonymous function and my value is stored in anonymousFun')
                    }
                - An anonymous function is a function without a function name. Only function expressions can be anonymous, function declarations must have a name.
            - Arrow function
                - Arrow function is an alternative to write a function, however function declaration and arrow function have some minor differences.
                    - An arrow function can be created like this
                        - const square = (n) => { }
            - Self invoking function
                - Self invoking functions are anonymous functions which do not need to be called to return a value.
                - Function expressions will execute automatically if the expression is followed by ().
                - You cannot self-invoke a function declaration.
                - You have to add parentheses around the function to indicate that it is a function expression:
                    - (function () { let x = "Hello!!";  // I will invoke myself })();
            - Function with unlimited number of parameters
                - Unlimited number of parameters in a regular function
                    - function sumAllNums() {
                        console.log(arguments)
                       }
                    - function sumAllNums() {
                        let sum = 0
                        for (let i = 0; i < arguments.length; i++) {
                          sum += arguments[i]
                        }
                        return sum
                      }
                - Unlimited number of parameters in an arrow function
                    - const sumAllNums = (...args) => {
                        let sum = 0
                        for (const element of args) {
                          sum += element
                        }
                        return sum
                      }
            - Function with default parameters
                - Sometimes we pass default values to parameters, when we invoke the function if we do not pass an argument the default value will be used. Both function declaration and arrow function can have a default value or values.
                    - example:
                        - function functionName(param = value) {}

    9. Higher Order Function
        - Higher order functions are functions which take other functions as a parameter or return a function as a value. The function passed as a parameter is called callback.
            - Returning Function
                - const higherOrder = n => {
                    const doSomething = m => {
                      const doWhatEver = t => {
                        return 2 * n + 3 * m + t
                      }
                      return doWhatEver
                    }
                    return doSomething
                  }
                  console.log(higherOrder(2)(3)(10))
        = setting time
            - In JavaScript we can execute some activity on certain interval of time or we can schedule(wait) for sometime to execute some activities.
                - setInterval
                    - In JavaScript, we use setInterval higher order function to do some activity continuously with in some interval of time. The setInterval global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback will be always called in that interval of time.
                    - function sayHello() {
                        console.log('Hello')
                      }
                      setInterval(sayHello, 2000) // it prints hello in every 2 seconds
                - setTimeout
                    - In JavaScript, we use setTimeout higher order function to execute some action at some time in the future. The setTimeout global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback wait for that amount of time.
                    - function sayHello() {
                        console.log('Hello')
                      }
                      setTimeout(sayHello, 2000) // it prints hello after it waits for 2 seconds.

    10. Destructuring and Spreading
        - Destructuring is a way to unpack arrays, and objects and assigning to a distinct variable. Destructuring allows us to write clean and readable code.
        - We can destructure
            - Arrays
                - Examples:
                    const numbers = [1, 2, 3]
                    const [num1, num2, num3] = numbers
                    console.log(num1, num2, num3) // 1, 2, 3,
                    
                    const constants = [2.72, 3.14, 9.81,37, 100]
                    const [e, pi, gravity, bodyTemp, boilingTemp] = constants
                    console.log(e, pi, gravity, bodyTemp, boilingTemp]// 2.72, 3.14, 9.81, 37,100
                    
                    const countries = ['Finland', 'Sweden', 'Norway']
                    const [fin, swe, nor] = countries
                    console.log(fin, swe, nor) // Finland, Sweden, Norway
                - During destructuring each variable should match with the index of the desired item in the array. 
                - We can pass a default value to the variable, and if the value of that specific index is undefined the default value will be used.
                - Destructuring Nested arrays
                    const fullStack = [
                        ['HTML', 'CSS', 'JS', 'React'],
                        ['Node', 'Express', 'MongoDB']
                    ]
                    const [frontEnd, backEnd] = fullstack
                    console.log(frontEnd, backEnd)
                    //["HTML", "CSS", "JS", "React"] , ["Node", "Express", "MongoDB"]
                - Skipping an Item during destructuring
                    const countries = ['Finland', 'Sweden', 'Iceland', 'Norway', 'Denmark']
                    const [fin, , ice, , den] = countries
                    console.log(fin, ice, den) // Finland, Iceland, Denmark
                - Getting the rest of the array using the spread operator
                    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    const [num1, num2, num3, ...rest] = nums
                    console.log(num1, num2, num3, rest) //1, 2, 3, [4, 5, 6, 7, 8, 9, 10]
                - Destructuring when we loop through arrays
                    const countries = [
                        ['Finland', 'Helsinki'],
                        ['Sweden', 'Stockholm'],
                        ['Norway', 'Oslo'],
                    ]
                    for (const [country, city] of countries) {
                        console.log(country, city)
                    }   
            - Destructuring objects
                - An object literal is made of key and value pairs.
                - When we destructure an object the name of the variable should be exactly the same as the key or property of the object
                    const rectangle = {
                        width: 20,
                        height: 10,
                    }
                    let { width, height } = rectangle;
                - Trying to access any key that is not in the object will return to you 'undifined'
                - Similar to the array, we can also use a default value in object destructuring
                - You can rename variables by doing the following
                    let { width: w, height: h } = rectangle;
                - Destucturing nested objects
                    const props = {
                        user:{
                          firstName:'Asabeneh',
                          lastName:'Yetayeh',
                          age:250
                        },
                        post:{
                          title:'Destructuring and Spread',
                          subtitle:'ES6',
                          year:2020
                      },
                      skills:['JS', 'React', 'Redux', 'Node', 'Python']
                      
                    }
                    const {user, post, skills} = props
                    const {firstName, lastName, age} = user
                    const {title, subtitle, year} = post
                    const [skillOne, skillTwo, skillThree, skillFour, skillFive] = skills
                    or
                    const {user:{firstName, lastName, age}, post:{title, subtitle, year}, skills:[skillOne, skillTwo, skillThree, skillFour, skillFive]} = props
                - Destructuring during loop through an array
                    const languages = [
                        { lang: 'English', count: 91 },
                        { lang: 'French', count: 45 },
                        { lang: 'Arabic', count: 25 },
                        { lang: 'Spanish', count: 24 },
                        { lang: 'Russian', count: 9 },
                        { lang: 'Portuguese', count: 9 },
                        { lang: 'Dutch', count: 8 },
                        { lang: 'German', count: 7 },
                        { lang: 'Chinese', count: 5 },
                        { lang: 'Swahili', count: 4 },
                        { lang: 'Serbian', count: 4 },
                    ]
                    
                    for (const { lang, count } of languages) {
                        console.log(`The ${lang} is spoken in ${count} countries.`)
                    }
                - Destructuring function parameter
                    const rectangle = { width: 20, height: 10 }
                    const calcualteArea = ({ width, height }) => width * height
                    const calculatePerimeter = ({ width, height } = 2 * (width + height))
        - Spread or Rest Operator
            - example 1
                const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                let [num1, num2, num3, ...rest] = nums
                console.log(num1, num2, num3)
                console.log(rest)

                1 2 3
                [4, 5, 6, 7, 8, 9, 10]
            - example 2
                const evens = [0, 2, 4, 6, 8, 10]
                const evenNumbers = [...evens]
                
                const odds = [1, 3, 5, 7, 9]
                const oddNumbers = [...odds]
                
                const wholeNumbers = [...evens, ...odds]

                console.log(evenNumbers)
                console.log(oddNumbers)
                console.log(wholeNumbers)

                [0, 2, 4, 6, 8, 10]
                [1, 3, 5, 7, 9]
                [0, 2, 4, 6, 8, 10, 1, 3, 5, 7, 9]
            - you can copy an object and change a variable
                const user = {
                    name: 'Asabeneh',
                    title: 'Programmer',
                    country: 'Finland',
                    city: 'Helsinki',
                }
                const copiedUser = { ...user, title: 'instructor' }
                console.log(copiedUser)

                {name: "Asabeneh", title: "instructor", country: "Finland", city: "Helsinki"}
            - spread with arrow functions
                const sumAllNums = (...args) => {
                    let sum = 0
                    for (const num of args) {
                    sum += num
                    }
                    return sum
                }
                console.log(sumAllNums(1, 2, 3, 4, 5))
                15
    
    11. Functional Programming
        - Functional programming allows you to write shorter code, clean code, and also to solve complicated problems which might be difficult to solve in a traditional way.
        - forEach
            - We use forEach when we like to iterate through an array of items.
            - The forEach is a higher-order function and it takes call-back as a parameter. 
            - The forEach method is used only with array and we use forEach if you are interested in each item or index or both.
                - example 1
                    function callback(item, index, arr) {}
                    array.forEach(callback)
                - example 2
                    const countries = ['Finland', 'Estonia', 'Sweden', 'Norway']
                    countries.forEach(function (country, index, arr) {
                    console.log(i, country.toUpperCase())
                    })
                - example 3 / If there is not much code inside the code block we can use an arrow function and we can write it without a curly bracket.
                    const countries = ['Finland', 'Estonia', 'Sweden', 'Norway']
                    countries.forEach((country, i) => console.log(i, country.toUpperCase()))
                    0 "FINLAND"
                    1 "ESTONIA"
                    2 "SWEDEN"
                    3 "NORWAY"
        - map
            - We use the map method whenever we like to modify an array. 
            - We use the map method only with arrays and it always returns an array.
                // Using function declaration
                    const countries = ['Finland', 'Estonia', 'Sweden', 'Norway'] 
                    const newCountries = countries.map(function (country) {
                    return country.toUpperCase()})
                    console.log(newCountries)
                // map using an arrow function call back
                    const countries = ['Finland', 'Estonia', 'Sweden', 'Norway']
                    const newCountries = countries.map((country) => country.toUpperCase())
                    console.log(newCountries) // ["FINLAND", "ESTONIA", "SWEDEN", "NORWAY"]
        - filter
            - The filter method like forEach and map is used with an array and it returns an array of the filtered items.
                - example 1
                    const countries = ['Finland', 'Estonia', 'Sweden', 'Norway', 'Iceland']
                    const countriesWithLand = countries.filter((country) =>
                    country.includes('land'))
                    console.log(countriesWithLand) // ["Finland", "Iceland"]
                - example 2
                    const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    const evens = numbers.filter((n) => n % 2 === 0)
                    const odds = numbers.filter((n) => n % 2 !== 0)
                    console.log(evens) // [0, 2, 4, 6, 8, 10]
                    console.log(odds) // [1, 3, 5, 7, 9]
        - reduce
            - We use the reduce method to sum all numbers in an array together, or to multiply items in an array or to concatenate items in an array.
                - example 1
                    const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    const sum = numbers.reduce((total, currentItem) => total + currentValue)
                    console.log(sum) // 55
                - example 2
                    const strs = ['Hello', 'world', '!']
                    const helloWorld = strs.reduce((all, cur) => all + ' ' + cur)
                    console.log(helloWorld) // "Hello world !"
                - example 3 / makes the initial value 10 / The initial value by default is 0
                    const numbers = [1, 2, 3, 4, 5]
                    const value = numbers.reduce((all, cur) => all * cur, 10)
                    console.log(value) // 1200
        - find
            - If we are interested in the FIRST occurrence of a certain item or element in an array we can use find method
                - example 1
                    const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    const firstEvenNum = numbers.find((n) => n % 2 === 0)
                    const firstOddNum = numbers.find((n) => n % 2 !== 0)
                    console.log(firstEvenNum) // 0
                    console.log(firstOddNum) // 1
                - example 2
                    const countries = ['Finland', 'Estonia', 'Sweden', 'Norway', 'Iceland']
                    const index = countries.find((country) => country.includes('o'))
                    console.log(index // Estonia
        - findIndex
            - The findIndex method works like find but findIndex returns the index of the item.
                const countries = ['Finland', 'Estonia', 'Sweden', 'Norway', 'Iceland']
                const index = countries.findIndex((country) => country.length === 6)
                console.log(index //2
        - some
            - The some method is used with array and return a boolean.
            - If one or some of the items satisfy the criteria the result will be true else it will be false.
                const evens = [0, 2, 4, 6, 8, 10]
                const someAreEvens = evens.some((n) => n % 2 === 0)
                const someAreOdds = evens.some((n) => n % 2 !== 0)
                console.log(someAreEvens) // true
                console.log(someAreOdds) // false
        - every
            - The method every is somehow similar to some but every item must satisfy the criteria.
                const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                const allAreEvens = numbers.every((n) => n % 2 === 0)
                const allAreOdd s= numbers.every((n) => n % 2 !== 0)
                
                console.log(allAreEven) // false
                console.log(allAreOdd)  // false

    12. Classes
        - JavaScript is an object oriented programming language. Everything in JavScript is an object, with its properties and methods.
        - We create class to create an object. A Class is like an object constructor, or a "blueprint" for creating objects.
        - The class defines attributes and the behavior of the object, while the object, on the other hand, represents the class.
            class Person {
                // code goes here
            }
            const person = new Person()
            console.log(person)
            Person {}
        - Class Constructor
            - The constructor is a builtin function which allows as to create a blueprint for our object.
                class Person {
                    constructor(firstName, lastName) {
                      this.firstName = firstName
                      this.lastName = lastName
                    }
                  } 
                const person1 = new Person('Asabeneh', 'Yetayeh')
                console.log(person1)
                Person {firstName: "Asabeneh", lastName: "Yetayeh"}
            - Default values with constructor
                class Person {
                    constructor(
                    firstName = 'Asabeneh',
                    lastName = 'Yetayeh',
                    age = 250,
                    country = 'Finland',
                    city = 'Helsinki'
                    ) {
                    this.firstName = firstName
                    this.lastName = lastName
                    this.age = age
                    this.country = country
                    this.city = city
                    }
                }
                const person1 = new Person() // it will take the default values
                const person2 = new Person('Lidiya', 'Tekle', 28, 'Finland', 'Espoo')
                console.log(person1)
                console.log(person2)
                Person {firstName: "Asabeneh", lastName: "Yetayeh", age: 250, country: "Finland", city: "Helsinki"}
                Person {firstName: "Lidiya", lastName: "Tekle", age: 28, country: "Finland", city: "Espoo"}
        - Class methods
            - The constructor inside a class is a builtin function which allow us to create a blueprint for the object.
            - In a class we can create class methods.
            - Methods are JavaScript functions inside the class.
                class Person {
                    constructor(firstName, lastName, age, country, city) {
                    this.firstName = firstName
                    this.lastName = lastName
                    this.age = age
                    this.country = country
                    this.city = city
                    }
                    getFullName() {
                    const fullName = this.firstName + ' ' + this.lastName
                    return fullName
                    }
                }
                const person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')
                console.log(person1.getFullName())
                Asabeneh Yetayeh
        - Properties with initial value
            - When we create a class for some properties we may have an initial value. 
            - For instance if you are playing a game, you starting score will be zero.
            - So, we may have a starting score or score which is zero.
                class Person {
                    constructor(firstName, lastName, age, country, city) {
                    this.firstName = firstName
                    this.lastName = lastName
                    this.age = age
                    this.country = country
                    this.city = city
                    this.score = 0
                    this.skills = []
                    }
                }
                const person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')
                console.log(person1.score)
                console.log(person1.skills)
                0
                []
        - getter
            - The get method allow us to access value from the object.
            - We write a get method using keyword get followed by a function.
            - Instead of accessing properties directly from the object we use getter to get the value. 
                class Person {
                    constructor(firstName, lastName, age, country, city) {
                    this.firstName = firstName
                    this.lastName = lastName
                    this.age = age
                    this.country = country
                    this.city = city
                    this.score = 0
                    this.skills = []
                    }
                    get getScore() {
                        return this.score
                    }
                    get getSkills() {
                        return this.skills
                    }
                }
                const person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')
                console.log(person1.getScore) // We do not need parenthesis to call a getter method
                console.log(person1.getSkills)
                0
                []
        - setter
            - The setter method allow us to modify the value of certain properties.
            - We write a setter method using keyword set followed by a function.
                class Person {
                    constructor(firstName, lastName, age, country, city) {
                    this.firstName = firstName
                    this.lastName = lastName
                    this.age = age
                    this.country = country
                    this.city = city
                    this.score = 0
                    this.skills = []
                    }
                    set setScore(score) {
                        this.score += score
                    }
                    set setSkill(skill) {
                        this.skills.push(skill)
                    }
                }
                person1.setScore = 1
                person1.setSkill = 'HTML'
                person1.setSkill = 'CSS'
                person1.setSkill = 'JavaScript'
                console.log(person1.score)
                console.log(person2.score)
                1
                ["HTML", "CSS", "JavaScript"]
        - Static method
            - The static keyword defines a static method for a class. Static methods are not called on instances of the class. Instead, they are called on the class itself. 
            - These are often utility functions, such as functions to create or clone objects. An example of static method is Date.now(). The now method is called directly from the class.
                class Person {
                    constructor(firstName, lastName, age, country, city) {
                    this.firstName = firstName
                    this.lastName = lastName
                    this.age = age
                    this.country = country
                    this.city = city
                    this.score = 0
                    this.skills = []
                    }
                    // gets random array from array
                    static favoriteSkill(){
                        const skills = ['HTML', 'CSS', 'JS', 'React', 'Python', 'Node']
                        const index = Math.floor(Math.random() * skills.length)
                        return skills[index]
                    }
                    // get the current date and time
                    static showDateTime() {
                    let now = new Date()
                    let year = now.getFullYear()
                    let month = now.getMonth() + 1
                    let date = now.getDate()
                    let hours = now.getHours()
                    let minutes = now.getMinutes()
                    if (hours < 10) {
                        hours = '0' + hours
                    }
                    if (minutes < 10) {
                        minutes = '0' + minutes
                    }
                    let dateMonthYear = date + '.' + month + '.' + year
                    let time = hours + ':' + minutes
                    let fullTime = dateMonthYear + ' ' + time
                    return fullTime
                    }
                }
                console.log(Person.favoriteSkill())
                console.log(Person.showDateTime())
                Node
                17.11.2022 23:52
        - Inheritance
            - Using inheritance we can access all the properties and the methods of the parent class.
            - This reduces repetition of code. 
            - If you remember, we have a Person parent class and we will create children from it. Our children class could be student, teach etc.
                class Student extends Person {
                    saySomething() {
                    console.log('I am a child of the person class')
                    }
                }
                const s1 = new Student('Asabeneh', 'Yetayeh', 'Finland', 250, 'Helsinki')
                console.log(s1)
                console.log(s1.saySomething())
                console.log(s1.getFullName())
                Student {firstName: "Asabeneh", lastName: "Yetayeh", age: "Finland", country: 250, city: "Helsinki", …}
                I am a child of the person class
                Asabeneh Yetayeh
        - Overriding methods
            - As you can see, we manage to access all the methods in the Person Class and we used it in the Student child class. 
            - We can customize the parent methods, we can add additional properties to a child class.
            - If we want to customize, the methods and if we want to add extra properties, we need to use the constructor function the child class too.
            - In side the constructor function we call the super() function to access all the properties from the parent class. 
            - The Person class didn't have gender but now let us give gender property for the child class, Student. 
            - If the same method name used in the child class, the parent method will be overridden.
                class Student extends Person {
                    constructor(firstName, lastName, age, country, city, gender) {
                    super(firstName, lastName, age, country, city)
                    this.gender = gender
                    }
                    getPersonInfo() {
                        let fullName = this.getFullName()
                        let skills =
                            this.skills.length > 0 &&
                            this.skills.slice(0, this.skills.length - 1).join(', ') +
                            ` and ${this.skills[this.skills.length - 1]}`
                    
                        let formattedSkills = skills ? `He knows ${skills}` : ''
                        let pronoun = this.gender == 'Male' ? 'He' : 'She'
                    
                        let info = `${fullName} is ${this.age}. ${pronoun} lives in ${this.city}, ${this.country}. ${formattedSkills}`
                        return info
                    }
                }
                const s1 = new Student('Asabeneh','Yetayeh',250,'Finland','Helsinki','Male')
                console.log(s1)
                console.log(s1.saySomething())
                console.log(s1.getFullName())
                console.log(s1.getPersonInfo())
                Student {firstName: "Asabeneh", lastName: "Yetayeh", age: 250, country: "Finland", city: "Helsinki", …}
                I am a child of the person class
                Asabeneh Yetayeh
                Asabeneh Yetayeh is 250. He lives in Helsinki, Finland. He knows HTML, CSS and JavaScript

    13 Document Object Model(DOM)
        - HTML document is structured as a JavaScript Object. E
        - very HTML element has a different properties which can help us to manipulate it. 
        - It is possible to get, create, append or remove HTML elements using JavaScript.
        - In React we do not directly manipulate the DOM instead, React Virtual DOM will take care of update all necessary changes.
        - The only place we directly touch the DOM is here at the index.html. 
        - React is a single page application because all the components will be rendered on the index.html page and there will not be any other HTML in the entire React Application.




Day 2
    1. What is React?
        - React was released in May 2013
        - React was created by Facebook
        - React is a JavaScript library for building user interfaces
        - React is used to build single page applications - An application which has only one HTML page.
        - React allows us to create reusable UI components
        - When we work with React we do not interact directly with the DOM
        - The DOM manipulation job is done by the React virtual DOM
        - React official documentation
            - https://reactjs.org/docs/getting-started.html

    2. Why React?
        - React is used for the following reasons.
            - fast
            - modular
            - scalable
            - flexible
            - big community and popular
            - open source
            - High job opportunity

    3. JSX
        - JSX allows us to write HTML elements with JavaScript code.
        - JSX will be converted to JavaScript on browser using a transpiler - babel.js
            - Babel is a library which transpiles JSX to pure JavaScript and latest JavaScript to older version.
        - We don't need to use quotes with JSX
        - Every HTML element should be wrapped by an outer HTML element to create a valid JSX element.
        - JSX element could be a single HTML element or many HTML elements wrapped in a parent HTML element.
            - Example 1
                const jsxElement = <h1>I am a JSX element</h1> // JS with HTML
            - Example 2
                const header = (
                    <header>
                    <h1>Welcome to 30 Days Of React</h1>
                    <h2>Getting Started React</h2>
                    <h3>JavaScript Library</h3>
                    <p>Asabeneh Yetayeh</p>
                    <small>Oct 2, 2020</small>
                    </header>
                )
                //Without the header HTML element or any other parent HTML element the above JSX is invalid
        - To render a JSX element to HTML document, we should first create an index HTML. 
        - The index.html is the only HTML file you will have in any React Application.
        - We can get started with React in two ways
            - by using CDN
            - by using create-react-app
                - The create-react-app creates a React project boilerplate outbox.
        - In the index.html file we have one div with a class root and script.
            <div class="root"></div>
            <script></script>
        - The root div is the gateway to connect all react components to the index.html
        - In the script tag we will write our JavaScript, but the script type will be babel.
        - When NOT using create-react-app you will have to import React and ReactDOM using CDN or link aswell as babel
            <script
            crossorigin
            src="https://unpkg.com/react@16/umd/react.development.js"
            ></script>
            <script
            crossorigin
            src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"
            ></script>
            <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
            <script type="text/babel">
        - To render a JSX Element or HTML using React you first have to get the root element using document.querySelect('.root')
            const rootElement = document.querySelector('.root')
            // JSX element
            const jsxElement = <h1>I am a JSX element</h1>
            // we render the JSX element using the ReactDOM package
            // ReactDOM has the render method and the render method takes two arguments
            ReactDOM.render(jsxElement, rootElement)
        - To add style to a JSX element we use inline style or className.
            inline style example.
                <header
                style={{ border: '2px solid orange', color: 'black', fontSize: '18px' }}
                >
        - In JSX element we write className instead of class because class is a reserved word in JavaScript.
        - className is used in styling more than ID in React.
        - Injecting data to a JSX Element
            - We can inject string, number, boolean, array data to JSX
            - We cannot directly inject an object.
            - We should extract object values first or destructure the content of the object before we inject the data to the JSX element.
            - Example of inserting an array you want listed.
                const techsFormatted = techs.map((tech) => <li key={tech}>{tech}</li>)



                
Day 3
    1. Setting Up
        - Node
            - Node is a JavaScript runtime environment that allows JavaScript to run on the server.
            - The React application starts by default at localhost 3000.
            - The create-react-app has configured a node server for the React Application.
        - Module
            - A single or multiple functions, that can be exported and imported when needed, can be included in a project.
                // math.js
                export const addTwo = (a, b) => a + b
                export const multiply = (a, b) => a * b
                export const subtract = (a, b) => a - b
                
                export default (function doSomeMath() {
                return {
                    addTwo,
                    multiply,
                    subtract,
                }
                })()
            - Now let's import the math.js modules to a different file:
                // index.js
                // to import the doSomeMath from the math.js with or without extension
                import doSomeMath from './math.js'
                
                // to import the other modules
                // since these modules were not exported as default we have to desctructure
                import { addTwo, multiply, subtract } from './math.js'
                
                import * as everything from './math.js' // to import everything remaining
                console.log(addTwo(5, 5))
                console.log(doSomeMath.addTwo(5, 5))
                console.log(everything)
            - After this, when you see import React from 'react' or import ReactDOM from 'react-dom' you will not be surprised.
        - Package
            - A Package is a module or a collection of modules. For instance, React, ReactDOM are packages.
        - Node Package Manager(NPM)
            - NPM is a default package manager for Node.js
            - It allows users to consume and distribute JavaScript modules that are available in the registry.
            - NPM allows to create packages, use packages and distribute packages.
        - Visual Studio Extensions
            - Prettier
            - ESLint
            - Bracket Pair Colorizer
            - ES7 React/Redux/GraphQL/React-Native snippets
        - Create React App
            - To create a react project you can use one of the following ways. Let's assume you installed node. Open the command line interface (CLI), git bash or terminal on Mac or Linux. Then run the following command.
                Asabeneh@DESKTOP-KGC1AKC MINGW64 ~/Desktop
                $ npx create-react-app name-of-your-project
            - If you do not like to write npx every time you create a project you may install create-react-app package globally in your computer using the following command.
                Asabeneh@DESKTOP-KGC1AKC MINGW64 ~/Desktop
                $ npm install -g create-react-app
            - After you installed create-react-app, you create a React application as follows:
                Asabeneh@DESKTOP-KGC1AKC MINGW64 ~/Desktop
                $ create-react-app name-of-project
    2. Your first React App
        - React Boilerplate
            - there are three folders in the React Boilerplate: node_modules, public and src
            - In addition, there are .gitignore, README.md, package.json and yarn.lock. Some of you, instead of yarn.lock, you may have package-lock.json.
                - node_modules - stores all the necessary node packages of the React applications.
                - Public
                    - index.html - the only HTML file we have in the entire application
                    - favicon.ico - an icon file
                    - manifest.json - is used to make the application a progressive web app
                    - other images - open graph images(open graph images are images which are visible when a link share on social media) 
                    - robots.txt - information, if the website allows web scraping
                - src
                    - App.css, index.css - are different CSS files
                    - index.js - a file which allows to connect all the components with index.html
                    - App.js - A file where we usually import most of the presentational components
                    - serviceWorker.js: is used to add progressive web app features
                    - setupTests.js - to write testing cases
                - package.json- List of packages the applications uses
                - .gitignore - React boilerplate comes with git initiated, and the .gitingore allows files and folders not to be pushed to GitHub
                - README.md - Markdown file to write documentation
                - yarn.lock or package-lock.json - a means to lock the version of the package
            - You should first import React and ReactDOM in the index.js file.
                - React allows us to write JSX and ReactDOM to render the JSX on the DOM
                - ReactDOM has a render method.
                    import React from 'react'
                    import ReactDOM from 'react-dom'



Day 4
    1. Components
        - A React component is a small, reusable code, which is responsible for one part of the application UI.
        - A React application is an aggregation of components.
        - In React we assemble different components together to create an application.
        - We use JavaScript functions or classes to make components.
        - If we use a function, the component will be a functional component, but if we use a class, the component will be a class-based component.
        - Components can be:
            - Functional Component / Presentational Component / Stateless Component / Dumb Component
            - Class Component / Container Component/ Statefull Component / Smart Component
        - The classification of components above does not work for the latest version of React
        - Components in React are JavaScript functions or classes, that return a JSX.
        - Component name must start with an uppercase, and if the name is two words, it should be CamelCase - a camel with two humps.
        - Creating React Component
            - Functional Component
                - Using a JavaScript function, we can make a functional React component.
                    // React component syntax
                    // it can be arrow function, function declaration or function expression
                    const jsx = <tag> Content </tag>
                    const ComponentName = () => {
                      return jsx
                    }
            - Rendering components
                - rendering just the header
                    ReactDOM.render(<Header />, rootElement)
                - rendering the full application.
                    ReactDOM.render(<App />, rootElement)
        - Injecting data to JSX in React Component
            - To inject data to a JSX we use the {} bracket.
                import React from 'react'
                import ReactDOM from 'react-dom'
                const welcome = 'Welcome to 30 Days Of React'
                const title = 'Getting Started React'
                const subtitle = 'JavaScript Library'
                const firstName = 'Asabeneh'
                const lastName = 'Yetayeh'
                const date = 'Oct 3, 2020'
                // JSX element, header
                const header = () => {
                return (
                    <header>
                    <div className='header-wrapper'>
                        <h1>{welcome}</h1>
                        <h2>{title}</h2>
                        <h3>{subtitle}</h3>
                        <p>
                        Instructor: {firstName} {lastName}
                        </p>
                        <small>Date: {date}</small>
                    </div>
                    </header>
                )
                }
                const rootElement = document.getElementById('root')
                // we render the App component using the ReactDOM package
                ReactDOM.render(<Header />, rootElement)
        - Further on Functional components
            - A component that returns only a single HTML as JSX is considered as a small component.
                - A button component or an alert box component, or just an input field component.
                    const buttonStyles = {
                        padding: '10px 20px',
                        background: 'rgb(0, 255, 0',
                        border: 'none',
                        borderRadius: 5,
                    }
                    const Button = () => <button style={buttonStyles}> action </button>
                - The Button component is made of a single HTML button element.
                - All CSS properties should be camelCase to make a JavaScript CSS object. 
                - If we pass a number without unit as CSS value, it is considered as px.
                - The Button component is a dumb component, because it does not take any parameters and we cannot change the action text dynamically.
                - We need to pass props to the button, to change the value dynamically.