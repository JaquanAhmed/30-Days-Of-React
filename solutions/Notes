Day 0
    Git Bash
        Configure username and email
            git config --global user.name "Your name here"
            git config --global user.email "your_email@example.com"
        cd /c/Users/jaq-a/30-Days-Of-React
        cd /c/Users/JAhmed/30-Days-Of-React
        clone your fork
            git clone git@github.com:username/30-Days-Of-React.git
        create a new branch
            git checkout -b 'name of branch'
        Structure Files in Git
            mkdir -p solutions/day-01
            touch solutions/day-01/level1.js
        Commit Exercice solutions
            git add solutions/day-01/Arrays/level2
            git commit -m "exercise level1 complete"
            git push origin exercise-solutions # branch `exercise-solutions` was created earlier
        Get Up to date exercise soluions
            git pull origin exercise-solutions




Day 1
    1. Variables
        - var, let and const difference:
            - https://www.developer.com/languages/javascript/javascript-var-let-const-variable-declaration/
            - var is not used much anymore
            - var is function scoped
            - let and const is block scoped
            - const should be used when variable doesn't need to be changed
            - const object cannot be updated, the properties of this objects can be updated
            - var variables can be updated and re-declared within its scope
            - let variables can be updated but not re-declared
            - const variables can neither be updated nor re-declared
            - They are all hoisted to the top of their scope. But while var variables are initialized with undefined, let and const variables are not initialized
            - While var and let can be declared without being initialized, const must be initialized during declaration

    3. Arrays
        - You can create arrays the following two ways
            - const arr = Array()
            - const arr = [] 
                - This is the recomended way to create empty arrays
        - 'array name' .length will give number of items in array
        - .split() splits strings into an array of items
        - to get last item in array type 'array name'.length - 1
        - Array() = creates an empty array
        - fill() = fills array with static elements
            - for example Array(8),fill('X') creates an array with 8 X's
        - concat() = combines two arrays
            - array you want to appear first .concat(array you want to appear after first)
        - indexOf() = checks if an item exists if it does it returns where it is within the array. If it doesn't it returns -1
        - lastIndexOf() = it gives the position of the last time the item is in the array
        - includes() = checks if item exists in array // boolean
        - isArray() = checks if the data type is an array // boolean
        - toString() = converts to string
        - join() = will convert the array to string with the inputed parameter as the connector
        - slice() = create an array with a part of another array
                - slice(2) = creates an array of all items after index 2
                - slice(1, 4) = creates an array of all items starting from index 1 and ending at index 3. 
        - splice() = It takes three parameters:Starting position, number of times to be removed and number of items to be added.
        - Push() = add an item to the end of an array
        - pop() = remove an item at the end of an array
        - shift() = remove an item at the beginning of an array
        - unshift() = add an item to the beginning of an array
        - reverse() = reverse array
        - sort() = sort array into alphabetical order
        - you can store arrays within arrays.
        - Remove Punctuation from string
            - replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"")
            - If their are crazy spaces between words because of the removed Punctuation.
                - replace(/\s{2,}/g," ");
        - To export stuff you have to make them a global variable (var)
            - Use export {name of variable};
            - import using import { name of variable } from "./file.js";
                -add more . before / to go back more folders
        - to check if variable is undefined use typeof

    4. Conditions
        - Conditions can be implementing using the following ways:
                - if
                - if else
                - if else if else
                - switch
                - ternary operator
        - Switch is an alternative for if else if else else
            - Case block runs if the value in the switch statement parenthesis matches with the case value. 
            - The break statement is to terminate execution so the code execution does not go down after the condition is satisfied. 
            - The default block runs if all the cases don't satisfy the condition.
        - Ternary operator is very common in React
            - It is a short way to write if else statement.
            - a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy.                
            
    5. Loops
        - Regular for loop can be used anywhere when the number of iteration is known.
        - While loop when the number of iteration is not known
        - Do while loop and while loop are almost the same but do while loop run at least once even when the condition is false
        - 'for of' used like java for each
            - used to iterate through arrays
        - 'for each' is similar to 'for of' but you need to also define the index number as well as the array itself sometimes
        - 'for in' is used for objects

    6. Scope
        - Variable scopes can be:
            - Windowed
            - Global
                - visible by everything
            - Local
                - Function - visible within a function (and its sub-functions and blocks)
                - Block - visible within a block (and its sub-blocks)
                - Module - visible within a module

    7. Object
        - To create an object you have to make it equal to {}
            - const person = {}
            - To create an object with values put the values within the curly brackets
                # - const person = { 
                #     firstname : 'Jaquan', 
                #     surname : 'Ahmed'
                #     } 
            - You can add more values to an object after it has been created
                - person.nationality = 'Ethiopian'
                - person.country = 'Finland'
                - person.title = 'teacher'
                - person.skills.push('Meteor')
                - person.skills.push('SasS')
                - person.isMarried = true
        - You can get values from an object using . followed by key name if the key-name is a one word as well as using square bracket and a quote
            - console.log(person.firstName)
            - or console.log(person['firstName'])
        - You can create functions as object values
            - You can use the word 'this' to access the values of different properties of the object
                - this.firstname
            - We can not use an arrow function as object method because the word this refers to the window inside an arrow function instead of the object itself
        - Object Methods
            - Object.assign: To copy an object without modifying the original object
                - Object.assign({}, person)
            - Object.keys: To get the keys or properties of an object as an array
            - Object.values: To get values of an object as an array
            - Object.entries: To get the keys and values in an array
            - hasOwnProperty: To check if a specific key or property exist in an object
    
    8. Functions
        -A function can be declared or created in couple of ways:
            - Declaration function
                - functions can be created like this
                    - function functionName() { }
                - and called like this
                    - functionName()
            - Expression function
                - Expression functions are anonymous functions. After we create a function without a name and we assign it to a variable. 
                  To return a value from the function we should call the variable.
                - expression functions can be created like this
                    - const square = function (n) { }
            - Anonymous function
                - const anonymousFun = function () { 
                    console.log('I am an anonymous function and my value is stored in anonymousFun')
                    }
                - An anonymous function is a function without a function name. Only function expressions can be anonymous, function declarations must have a name.
            - Arrow function
                - Arrow function is an alternative to write a function, however function declaration and arrow function have some minor differences.
                    - An arrow function can be created like this
                        - const square = (n) => { }
            - Self invoking function
                - Self invoking functions are anonymous functions which do not need to be called to return a value.
                - Function expressions will execute automatically if the expression is followed by ().
                - You cannot self-invoke a function declaration.
                - You have to add parentheses around the function to indicate that it is a function expression:
                    - (function () { let x = "Hello!!";  // I will invoke myself })();
            - Function with unlimited number of parameters
                - Unlimited number of parameters in a regular function
                    - function sumAllNums() {
                        console.log(arguments)
                       }
                    - function sumAllNums() {
                        let sum = 0
                        for (let i = 0; i < arguments.length; i++) {
                          sum += arguments[i]
                        }
                        return sum
                      }
                - Unlimited number of parameters in an arrow function
                    - const sumAllNums = (...args) => {
                        let sum = 0
                        for (const element of args) {
                          sum += element
                        }
                        return sum
                      }
            - Function with default parameters
                - Sometimes we pass default values to parameters, when we invoke the function if we do not pass an argument the default value will be used. Both function declaration and arrow function can have a default value or values.
                    - example:
                        - function functionName(param = value) {}

    9. Higher Order Function
        - Higher order functions are functions which take other functions as a parameter or return a function as a value. The function passed as a parameter is called callback.
            - Returning Function
                - const higherOrder = n => {
                    const doSomething = m => {
                      const doWhatEver = t => {
                        return 2 * n + 3 * m + t
                      }
                      return doWhatEver
                    }
                    return doSomething
                  }
                  console.log(higherOrder(2)(3)(10))
        = setting time
            - In JavaScript we can execute some activity on certain interval of time or we can schedule(wait) for sometime to execute some activities.
                - setInterval
                    - In JavaScript, we use setInterval higher order function to do some activity continuously with in some interval of time. The setInterval global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback will be always called in that interval of time.
                    - function sayHello() {
                        console.log('Hello')
                      }
                      setInterval(sayHello, 2000) // it prints hello in every 2 seconds
                - setTimeout
                    - In JavaScript, we use setTimeout higher order function to execute some action at some time in the future. The setTimeout global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback wait for that amount of time.
                    - function sayHello() {
                        console.log('Hello')
                      }
                      setTimeout(sayHello, 2000) // it prints hello after it waits for 2 seconds.

    10. Destructuring and Spreading
        - Destructuring is a way to unpack arrays, and objects and assigning to a distinct variable. Destructuring allows us to write clean and readable code.
        - We can destructure
            - Arrays
                - Examples:
                    const numbers = [1, 2, 3]
                    const [num1, num2, num3] = numbers
                    console.log(num1, num2, num3) // 1, 2, 3,
                    
                    const constants = [2.72, 3.14, 9.81,37, 100]
                    const [e, pi, gravity, bodyTemp, boilingTemp] = constants
                    console.log(e, pi, gravity, bodyTemp, boilingTemp]// 2.72, 3.14, 9.81, 37,100
                    
                    const countries = ['Finland', 'Sweden', 'Norway']
                    const [fin, swe, nor] = countries
                    console.log(fin, swe, nor) // Finland, Sweden, Norway
                - During destructuring each variable should match with the index of the desired item in the array. 
                - We can pass a default value to the variable, and if the value of that specific index is undefined the default value will be used.
                - Destructuring Nested arrays
                    const fullStack = [
                        ['HTML', 'CSS', 'JS', 'React'],
                        ['Node', 'Express', 'MongoDB']
                    ]
                    const [frontEnd, backEnd] = fullstack
                    console.log(frontEnd, backEnd)
                    //["HTML", "CSS", "JS", "React"] , ["Node", "Express", "MongoDB"]
                - Skipping an Item during destructuring
                    const countries = ['Finland', 'Sweden', 'Iceland', 'Norway', 'Denmark']
                    const [fin, , ice, , den] = countries
                    console.log(fin, ice, den) // Finland, Iceland, Denmark
                - Getting the rest of the array using the spread operator
                    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                    const [num1, num2, num3, ...rest] = nums
                    console.log(num1, num2, num3, rest) //1, 2, 3, [4, 5, 6, 7, 8, 9, 10]
                - Destructuring when we loop through arrays
                    const countries = [
                        ['Finland', 'Helsinki'],
                        ['Sweden', 'Stockholm'],
                        ['Norway', 'Oslo'],
                    ]
                    for (const [country, city] of countries) {
                        console.log(country, city)
                    }   
            - Destructuring objects
                - An object literal is made of key and value pairs.
                - When we destructure an object the name of the variable should be exactly the same as the key or property of the object
                    const rectangle = {
                        width: 20,
                        height: 10,
                    }
                    let { width, height } = rectangle;
                - Trying to access any key that is not in the object will return to you 'undifined'
                - Similar to the array, we can also use a default value in object destructuring
                - You can rename variables by doing the following
                    let { width: w, height: h } = rectangle;
                - Destucturing nested objects
                    const props = {
                        user:{
                          firstName:'Asabeneh',
                          lastName:'Yetayeh',
                          age:250
                        },
                        post:{
                          title:'Destructuring and Spread',
                          subtitle:'ES6',
                          year:2020
                      },
                      skills:['JS', 'React', 'Redux', 'Node', 'Python']
                      
                    }
                    const {user, post, skills} = props
                    const {firstName, lastName, age} = user
                    const {title, subtitle, year} = post
                    const [skillOne, skillTwo, skillThree, skillFour, skillFive] = skills
                    or
                    const {user:{firstName, lastName, age}, post:{title, subtitle, year}, skills:[skillOne, skillTwo, skillThree, skillFour, skillFive]} = props
                - Destructuring during loop through an array
                    const languages = [
                        { lang: 'English', count: 91 },
                        { lang: 'French', count: 45 },
                        { lang: 'Arabic', count: 25 },
                        { lang: 'Spanish', count: 24 },
                        { lang: 'Russian', count: 9 },
                        { lang: 'Portuguese', count: 9 },
                        { lang: 'Dutch', count: 8 },
                        { lang: 'German', count: 7 },
                        { lang: 'Chinese', count: 5 },
                        { lang: 'Swahili', count: 4 },
                        { lang: 'Serbian', count: 4 },
                    ]
                    
                    for (const { lang, count } of languages) {
                        console.log(`The ${lang} is spoken in ${count} countries.`)
                    }
                - Destructuring function parameter
                    const rectangle = { width: 20, height: 10 }
                    const calcualteArea = ({ width, height }) => width * height
                    const calculatePerimeter = ({ width, height } = 2 * (width + height))
        - Spread or Rest Operator
            - example 1
                const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                let [num1, num2, num3, ...rest] = nums
                console.log(num1, num2, num3)
                console.log(rest)

                1 2 3
                [4, 5, 6, 7, 8, 9, 10]
            - example 2
                const evens = [0, 2, 4, 6, 8, 10]
                const evenNumbers = [...evens]
                
                const odds = [1, 3, 5, 7, 9]
                const oddNumbers = [...odds]
                
                const wholeNumbers = [...evens, ...odds]

                console.log(evenNumbers)
                console.log(oddNumbers)
                console.log(wholeNumbers)

                [0, 2, 4, 6, 8, 10]
                [1, 3, 5, 7, 9]
                [0, 2, 4, 6, 8, 10, 1, 3, 5, 7, 9]
            - you can copy an object and change a variable
                const user = {
                    name: 'Asabeneh',
                    title: 'Programmer',
                    country: 'Finland',
                    city: 'Helsinki',
                }
                const copiedUser = { ...user, title: 'instructor' }
                console.log(copiedUser)

                {name: "Asabeneh", title: "instructor", country: "Finland", city: "Helsinki"}
            - spread with arrow functions
                const sumAllNums = (...args) => {
                    let sum = 0
                    for (const num of args) {
                    sum += num
                    }
                    return sum
                }
                console.log(sumAllNums(1, 2, 3, 4, 5))
                15
    
    11. Functional Programming
                


                        


                
            
                

        
        


